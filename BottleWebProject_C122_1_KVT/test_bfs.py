import unittest
from bfs import bfs_spanning_tree, is_symmetric, is_valid_values

class TestBFS(unittest.TestCase):
    
    # Тест для проверки корректности работы алгоритма BFS
    def test_bfs_spanning_tree(self):
        # Тестовые случаи
        test_cases = [
            {
                "matrix": [
                    [0, 1, 0, 1],
                    [1, 0, 1, 0],
                    [0, 1, 0, 1],
                    [1, 0, 1, 0]
                ],
                "start_node": 0,
                "expected": [
                    [0, 1, 0, 1],
                    [1, 0, 1, 0],
                    [0, 1, 0, 0],
                    [1, 0, 0, 0]
                ]
            },
            {
                "matrix": [
                    [0, 0, 0, 0, 1, 0, 1, 1, 1],
                    [0, 0, 1, 0, 0, 1, 1, 1, 1],
                    [0, 1, 0, 0, 0, 0, 0, 1, 1],
                    [0, 0, 0, 0, 0, 0, 0, 1, 1],
                    [1, 0, 0, 0, 0, 1, 1, 1, 0],
                    [0, 1, 0, 0, 1, 0, 0, 0, 0],
                    [1, 1, 0, 0, 1, 0, 0, 1, 0],
                    [1, 1, 1, 1, 1, 0, 1, 0, 0],
                    [1, 1, 1, 1, 0, 0, 0, 0, 0]
                ],
                "start_node": 1,
                "expected": [
                    [0, 0, 0, 0, 0, 0, 1, 0, 0],
                    [0, 0, 1, 0, 0, 1, 1, 1, 1],
                    [0, 1, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 0, 0, 0, 1, 0],
                    [0, 0, 0, 0, 0, 1, 0, 0, 0],
                    [0, 1, 0, 0, 1, 0, 0, 0, 0],
                    [1, 1, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 0, 1, 0, 0, 0, 0, 0],
                    [0, 1, 0, 0, 0, 0, 0, 0, 0]
                ]
            },
            {
                "matrix": [
                    [0, 1, 1],
                    [1, 0, 1],
                    [1, 1, 0]
                ],
                "start_node": 2,
                "expected": [
                    [0, 0, 1],
                    [0, 0, 1],
                    [1, 1, 0]
                ]
            },
            {
                "matrix": [
                    [0, 1, 0, 1, 1, 0, 0, 0, 1, 1],
                    [1, 0, 0, 0, 1, 1, 0, 1, 1, 1],
                    [0, 0, 0, 1, 0, 1, 0, 0, 0, 0],
                    [1, 0, 1, 0, 0, 0, 1, 0, 1, 0],
                    [1, 1, 0, 0, 0, 0, 1, 0, 0, 0],
                    [0, 1, 1, 0, 0, 0, 1, 0, 0, 1],
                    [0, 0, 0, 1, 1, 1, 0, 0, 1, 1],
                    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                    [1, 1, 0, 1, 0, 0, 1, 0, 0, 0],
                    [1, 1, 0, 0, 0, 1, 1, 0, 0, 0]
                ],
                "start_node": 7,
                "expected": [
                    [0, 1, 0, 1, 0, 0, 0, 0, 0, 0],
                    [1, 0, 0, 0, 1, 1, 0, 1, 1, 1],
                    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
                    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 0, 0, 0, 0, 1, 0, 0, 0],
                    [0, 1, 1, 0, 0, 0, 0, 0, 0, 0],
                    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0]
                ]
            },
            {
                "matrix": [
                    [0, 0, 0, 1, 1, 1],
                    [0, 0, 0, 0, 1, 1],
                    [0, 0, 0, 0, 1, 0],
                    [1, 0, 0, 0, 1, 1],
                    [1, 1, 1, 1, 0, 0],
                    [1, 1, 0, 1, 0, 0]
                ],
                "start_node": 1,
                "expected": [
                    [0, 0, 0, 0, 1, 0],
                    [0, 0, 0, 0, 1, 1],
                    [0, 0, 0, 0, 1, 0],
                    [0, 0, 0, 0, 1, 0],
                    [1, 1, 1, 1, 0, 0],
                    [0, 1, 0, 0, 0, 0]
                ]
            }
        ]

        # Проверка каждого тестового случая
        for case in test_cases:
            actual = bfs_spanning_tree(case["matrix"], case["start_node"])
            self.assertEqual(actual, case["expected"])
    
    # Тест для проверки отлавливания несимметричных матриц
    def test_non_symmetric_matrices(self):
        # Тестовые случаи
        non_symmetric_matrices = [
            [
                [0, 1, 0],
                [0, 0, 0],
                [0, 0, 0]
            ],
            [
                [0, 0, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 1, 0, 0, 1, 1, 1, 1],
                [0, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 1, 0, 0, 0],
                [0, 1, 0, 0, 1, 0, 0, 0, 0],
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 0, 1, 0, 0, 0, 0, 0],
                [0, 1, 0, 0, 0, 0, 0, 0, 0]
            ],
            [
                [0, 0, 0, 1, 1, 1],
                [1, 0, 0, 0, 1, 1],
                [0, 0, 0, 0, 1, 0],
                [1, 0, 0, 0, 1, 1],
                [1, 1, 1, 1, 0, 0],
                [1, 1, 0, 1, 0, 0]
            ],
            [
                [0, 0, 0, 1],
                [1, 0, 1, 0],
                [0, 1, 0, 1],
                [1, 0, 1, 0]
            ],
            [
                [0, 0, 0, 0, 0, 0, 1, 0, 0],
                [0, 0, 1, 0, 0, 1, 1, 0, 1],
                [0, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 1, 0],
                [0, 0, 0, 0, 0, 1, 0, 0, 0],
                [0, 1, 0, 0, 1, 0, 0, 0, 0],
                [1, 1, 0, 0, 0, 0, 0, 0, 0],
                [0, 1, 0, 1, 0, 0, 0, 0, 0],
                [0, 1, 0, 0, 0, 0, 0, 0, 0]
            ]
        ]
        
        for matrix in non_symmetric_matrices:
            self.assertFalse(is_symmetric(matrix))

    # Тест для проверки отлавливания недопустимых значений в матрицах
    def test_non_valid_values(self):
        # Тестовые случаи
        invalid_matrices = [
            [
                [1, 2, 3],
                [4, 5, 6],
                [7, 8, 9]
            ],
            [
                [0, 0, -1],
                [0, 0, 0],
                [0, 0, 0]
            ],
            [
                [0, 0, 'a', 1, 1, 1],
                [0, 0, 0, 0, 1, 1],
                [0, 0, 0, 0, 1, 0],
                [1, 0, 0, 0, 1, 1],
                [1, 1, 1, 1, 0, 0],
                [1, 1, 0, 1, 0, 0]
            ],
            [
                [0, 1, 0, 1],
                [1, 0, 2, 0],
                [0, 1, 0, 0],
                [1, 0, 0, 0]
            ],
            [
                [1, 0, 1],
                [0, 1, 0],
                [0, 0, 1]
            ]
        ]
        
        for matrix in invalid_matrices:
            self.assertFalse(is_valid_values(matrix))

if __name__ == '__main__':
    unittest.main()